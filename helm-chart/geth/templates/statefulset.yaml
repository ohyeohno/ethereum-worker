apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "ethereum.fullname" . }}
  labels:
    app.kubernetes.io/app: {{ include "ethereum.name" . }}
    helm.sh/chart: {{ include "ethereum.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
spec:
  serviceName: "{{ include "ethereum.fullname" . }}"
  replicas: {{ .Values.replicaCount }} # by default is 1
  selector:
    matchLabels:
      app.kubernetes.io/app: {{ include "ethereum.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/app: {{ include "ethereum.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
    spec:
      terminationGracePeriodSeconds: {{ .Values.terminationGracePeriodSeconds }}
      containers:
      - name: {{ .Chart.Name }}
        image: {{ .Values.image.repository }}:{{ .Values.image.tag }}
        imagePullPolicy: {{ .Values.imagePullPolicy }}
        command: ["geth"]
        args:
        - "--verbosity=3"
        - "--config=/config/geth.toml"
        - "--rpc"
        - "--ws"
        {{- if eq .Values.genesis.networkId 3.0 }}
        - "--testnet"
        {{- end }}
        ports:
        - name: rpc
          containerPort: {{ .Values.service.rpcPort }}
        - name: ws
          containerPort: {{ .Values.service.wsPort }}
        - name: discovery-tcp
          containerPort: {{ .Values.service.p2pPort }}
        - name: discovery-udp
          containerPort: {{ .Values.service.p2pPort }}
          protocol: UDP
        volumeMounts:
        - name: {{ include "ethereum.fullname" . }}
          mountPath: /root/.ethereum
        - name: config
          mountPath: /config
      {{- if .Values.argo.enabled }}
      - name: argo-tunnel
        image: crazymax/cloudflared:2020.2.1
        imagePullPolicy: IfNotPresent
        command: ["cloudflared", "tunnel"]
        args:
        - --url=127.0.0.1:{{ .Values.service.rpcPort }}
        - --no-autoupdate
        {{- if .Values.argo.hostname }}
        - --hostname={{- .Values.argo.hostname -}}
        {{- end }}
        {{- if .Values.argo.certSecretName }}
        - --origincert=/etc/cloudflared/cert.pem
        {{- end }}
        resources:
          limits:
            cpu: 100m
            memory: 150Mi
          requests:
            cpu: 10m
            memory: 20Mi
        {{- if .Values.argo.certSecretName }}
        volumeMounts:
        - mountPath: /etc/cloudflared
          name: tunnel-secret
          readOnly: true
        {{- end }}
      {{- end }}
      volumes:
        - name: config
          configMap:
            name: {{ include "ethereum.fullname" . }}
        {{- if .Values.argo.certSecretName }}
        - name: tunnel-secret
          secret:
            secretName: {{ .Values.argo.certSecretName }}
        {{- end }}
  volumeClaimTemplates:
    - metadata:
        name: {{ include "ethereum.fullname" . }}
      spec:
        accessModes:
        - {{.Values.persistence.accessMode }}
        {{- if .Values.persistence.storageClass }}
        {{- if (eq "-" .Values.persistence.storageClass) }}
        storageClassName: ""
        {{- else }}
        storageClassName: "{{ .Values.persistence.storageClass }}"
        {{- end }}
        {{- end }}
        resources:
          requests:
            storage: {{ .Values.persistence.size }}
        volumeMode: Filesystem
